/**
 * ToDo and Tracker
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 *
 * NOTE: This file is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the file manually.
 */

import * as api from "./api"
import { Configuration } from "./configuration"

const config: Configuration = {}

describe("EventApi", () => {
  let instance: api.EventApi
  beforeEach(function() {
    instance = new api.EventApi(config)
  });

  test("deleteEvent", () => {
    const tid: number = 789
    const eid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deleteEvent(tid, eid, apiKey, {})).resolves.toBe(null)
  })
  test("getEventById", () => {
    const tid: number = 789
    const eid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.getEventById(tid, eid, apiKey, {})).resolves.toBe(null)
  })
  test("updateEvent", () => {
    const tid: number = 789
    const eid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.updateEvent(tid, eid, apiKey, {})).resolves.toBe(null)
  })
})

describe("PetApi", () => {
  let instance: api.PetApi
  beforeEach(function() {
    instance = new api.PetApi(config)
  });

  test("addPet", () => {
    const body: api.Pet = undefined
    return expect(instance.addPet(body, {})).resolves.toBe(null)
  })
  test("deletePet", () => {
    const petId: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deletePet(petId, apiKey, {})).resolves.toBe(null)
  })
  test("findPetsByStatus", () => {
    const status: Array<string> = undefined
    return expect(instance.findPetsByStatus(status, {})).resolves.toBe(null)
  })
  test("findPetsByTags", () => {
    const tags: Array<string> = undefined
    return expect(instance.findPetsByTags(tags, {})).resolves.toBe(null)
  })
  test("getPetById", () => {
    const petId: number = 789
    return expect(instance.getPetById(petId, {})).resolves.toBe(null)
  })
  test("updatePet", () => {
    const body: api.Pet = undefined
    return expect(instance.updatePet(body, {})).resolves.toBe(null)
  })
  test("updatePetWithForm", () => {
    const petId: number = 789
    const name: string = "name_example"
    const status: string = "status_example"
    return expect(instance.updatePetWithForm(petId, name, status, {})).resolves.toBe(null)
  })
  test("uploadFile", () => {
    const petId: number = 789
    const additionalMetadata: string = "additionalMetadata_example"
    const file: Blob = "file_example"
    return expect(instance.uploadFile(petId, additionalMetadata, file, {})).resolves.toBe(null)
  })
})

describe("ProjectApi", () => {
  let instance: api.ProjectApi
  beforeEach(function() {
    instance = new api.ProjectApi(config)
  });

  test("addProject", () => {
    const body: api.Project = undefined
    const apiKey: string = "apiKey_example"
    return expect(instance.addProject(body, apiKey, {})).resolves.toBe(null)
  })
  test("deleteProject", () => {
    const pid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deleteProject(pid, apiKey, {})).resolves.toBe(null)
  })
  test("getProjectById", () => {
    const pid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.getProjectById(pid, apiKey, {})).resolves.toBe(null)
  })
  test("getProjects", () => {
    const apiKey: string = "apiKey_example"
    return expect(instance.getProjects(apiKey, {})).resolves.toBe(null)
  })
  test("updateProject", () => {
    const body: api.Project = undefined
    const pid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.updateProject(body, pid, apiKey, {})).resolves.toBe(null)
  })
})

describe("StoreApi", () => {
  let instance: api.StoreApi
  beforeEach(function() {
    instance = new api.StoreApi(config)
  });

  test("deleteOrder", () => {
    const orderId: number = 789
    return expect(instance.deleteOrder(orderId, {})).resolves.toBe(null)
  })
  test("getInventory", () => {
    return expect(instance.getInventory({})).resolves.toBe(null)
  })
  test("getOrderById", () => {
    const orderId: number = 789
    return expect(instance.getOrderById(orderId, {})).resolves.toBe(null)
  })
  test("placeOrder", () => {
    const body: api.Order = undefined
    return expect(instance.placeOrder(body, {})).resolves.toBe(null)
  })
})

describe("TaskApi", () => {
  let instance: api.TaskApi
  beforeEach(function() {
    instance = new api.TaskApi(config)
  });

  test("addTask", () => {
    const body: api.Task = undefined
    const apiKey: string = "apiKey_example"
    return expect(instance.addTask(body, apiKey, {})).resolves.toBe(null)
  })
  test("deleteTask", () => {
    const tid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.deleteTask(tid, apiKey, {})).resolves.toBe(null)
  })
  test("getTaskById", () => {
    const tid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.getTaskById(tid, apiKey, {})).resolves.toBe(null)
  })
  test("getTasks", () => {
    const apiKey: string = "apiKey_example"
    return expect(instance.getTasks(apiKey, {})).resolves.toBe(null)
  })
  test("updateTask", () => {
    const body: api.Task = undefined
    const tid: number = 789
    const apiKey: string = "apiKey_example"
    return expect(instance.updateTask(body, tid, apiKey, {})).resolves.toBe(null)
  })
})

describe("UserApi", () => {
  let instance: api.UserApi
  beforeEach(function() {
    instance = new api.UserApi(config)
  });

  test("createUser", () => {
    const body: api.User = undefined
    return expect(instance.createUser(body, {})).resolves.toBe(null)
  })
  test("createUsersWithArrayInput", () => {
    const body: Array<api.User> = undefined
    return expect(instance.createUsersWithArrayInput(body, {})).resolves.toBe(null)
  })
  test("createUsersWithListInput", () => {
    const body: Array<api.User> = undefined
    return expect(instance.createUsersWithListInput(body, {})).resolves.toBe(null)
  })
  test("deleteUser", () => {
    const username: string = "username_example"
    return expect(instance.deleteUser(username, {})).resolves.toBe(null)
  })
  test("getUserByName", () => {
    const username: string = "username_example"
    return expect(instance.getUserByName(username, {})).resolves.toBe(null)
  })
  test("loginUser", () => {
    const username: string = "username_example"
    const password: string = "password_example"
    return expect(instance.loginUser(username, password, {})).resolves.toBe(null)
  })
  test("logoutUser", () => {
    return expect(instance.logoutUser({})).resolves.toBe(null)
  })
  test("updateUser", () => {
    const body: api.User = undefined
    const username: string = "username_example"
    return expect(instance.updateUser(body, username, {})).resolves.toBe(null)
  })
})

