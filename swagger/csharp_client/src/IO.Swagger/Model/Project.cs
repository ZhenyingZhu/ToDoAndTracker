/* 
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Text.RegularExpressions;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Runtime.Serialization;
using Newtonsoft.Json;
using Newtonsoft.Json.Converters;
using System.ComponentModel.DataAnnotations;
using SwaggerDateConverter = IO.Swagger.Client.SwaggerDateConverter;

namespace IO.Swagger.Model
{
    /// <summary>
    /// Project
    /// </summary>
    [DataContract]
        public partial class Project :  IEquatable<Project>, IValidatableObject
    {
        /// <summary>
        /// Defines Category
        /// </summary>
        [JsonConverter(typeof(StringEnumConverter))]
                public enum CategoryEnum
        {
            /// <summary>
            /// Enum Work for value: work
            /// </summary>
            [EnumMember(Value = "work")]
            Work = 1,
            /// <summary>
            /// Enum Household for value: household
            /// </summary>
            [EnumMember(Value = "household")]
            Household = 2,
            /// <summary>
            /// Enum SelfImprove for value: selfImprove
            /// </summary>
            [EnumMember(Value = "selfImprove")]
            SelfImprove = 3,
            /// <summary>
            /// Enum Health for value: health
            /// </summary>
            [EnumMember(Value = "health")]
            Health = 4,
            /// <summary>
            /// Enum Leisure for value: leisure
            /// </summary>
            [EnumMember(Value = "leisure")]
            Leisure = 5        }
        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [DataMember(Name="category", EmitDefaultValue=false)]
        public CategoryEnum? Category { get; set; }
        /// <summary>
        /// Initializes a new instance of the <see cref="Project" /> class.
        /// </summary>
        /// <param name="id">id.</param>
        /// <param name="name">name (required).</param>
        /// <param name="createDate">createDate.</param>
        /// <param name="deadlineDate">deadlineDate.</param>
        /// <param name="projectNote">projectNote.</param>
        /// <param name="tasks">tasks.</param>
        /// <param name="tags">tags.</param>
        /// <param name="category">category.</param>
        /// <param name="involvedUsers">involvedUsers.</param>
        /// <param name="isArchieved">isArchieved.</param>
        public Project(long? id = default(long?), string name = default(string), DateTime? createDate = default(DateTime?), DateTime? deadlineDate = default(DateTime?), string projectNote = default(string), List<Task> tasks = default(List<Task>), List<Tag> tags = default(List<Tag>), CategoryEnum? category = default(CategoryEnum?), List<long?> involvedUsers = default(List<long?>), bool? isArchieved = default(bool?))
        {
            // to ensure "name" is required (not null)
            if (name == null)
            {
                throw new InvalidDataException("name is a required property for Project and cannot be null");
            }
            else
            {
                this.Name = name;
            }
            this.Id = id;
            this.CreateDate = createDate;
            this.DeadlineDate = deadlineDate;
            this.ProjectNote = projectNote;
            this.Tasks = tasks;
            this.Tags = tags;
            this.Category = category;
            this.InvolvedUsers = involvedUsers;
            this.IsArchieved = isArchieved;
        }
        
        /// <summary>
        /// Gets or Sets Id
        /// </summary>
        [DataMember(Name="id", EmitDefaultValue=false)]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [DataMember(Name="name", EmitDefaultValue=false)]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>
        [DataMember(Name="createDate", EmitDefaultValue=false)]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets DeadlineDate
        /// </summary>
        [DataMember(Name="deadlineDate", EmitDefaultValue=false)]
        public DateTime? DeadlineDate { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNote
        /// </summary>
        [DataMember(Name="projectNote", EmitDefaultValue=false)]
        public string ProjectNote { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>
        [DataMember(Name="tasks", EmitDefaultValue=false)]
        public List<Task> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>
        [DataMember(Name="tags", EmitDefaultValue=false)]
        public List<Tag> Tags { get; set; }


        /// <summary>
        /// Gets or Sets InvolvedUsers
        /// </summary>
        [DataMember(Name="involvedUsers", EmitDefaultValue=false)]
        public List<long?> InvolvedUsers { get; set; }

        /// <summary>
        /// Gets or Sets IsArchieved
        /// </summary>
        [DataMember(Name="isArchieved", EmitDefaultValue=false)]
        public bool? IsArchieved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  DeadlineDate: ").Append(DeadlineDate).Append("\n");
            sb.Append("  ProjectNote: ").Append(ProjectNote).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  InvolvedUsers: ").Append(InvolvedUsers).Append("\n");
            sb.Append("  IsArchieved: ").Append(IsArchieved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }
  
        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public virtual string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="input">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object input)
        {
            return this.Equals(input as Project);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="input">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project input)
        {
            if (input == null)
                return false;

            return 
                (
                    this.Id == input.Id ||
                    (this.Id != null &&
                    this.Id.Equals(input.Id))
                ) && 
                (
                    this.Name == input.Name ||
                    (this.Name != null &&
                    this.Name.Equals(input.Name))
                ) && 
                (
                    this.CreateDate == input.CreateDate ||
                    (this.CreateDate != null &&
                    this.CreateDate.Equals(input.CreateDate))
                ) && 
                (
                    this.DeadlineDate == input.DeadlineDate ||
                    (this.DeadlineDate != null &&
                    this.DeadlineDate.Equals(input.DeadlineDate))
                ) && 
                (
                    this.ProjectNote == input.ProjectNote ||
                    (this.ProjectNote != null &&
                    this.ProjectNote.Equals(input.ProjectNote))
                ) && 
                (
                    this.Tasks == input.Tasks ||
                    this.Tasks != null &&
                    input.Tasks != null &&
                    this.Tasks.SequenceEqual(input.Tasks)
                ) && 
                (
                    this.Tags == input.Tags ||
                    this.Tags != null &&
                    input.Tags != null &&
                    this.Tags.SequenceEqual(input.Tags)
                ) && 
                (
                    this.Category == input.Category ||
                    (this.Category != null &&
                    this.Category.Equals(input.Category))
                ) && 
                (
                    this.InvolvedUsers == input.InvolvedUsers ||
                    this.InvolvedUsers != null &&
                    input.InvolvedUsers != null &&
                    this.InvolvedUsers.SequenceEqual(input.InvolvedUsers)
                ) && 
                (
                    this.IsArchieved == input.IsArchieved ||
                    (this.IsArchieved != null &&
                    this.IsArchieved.Equals(input.IsArchieved))
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                int hashCode = 41;
                if (this.Id != null)
                    hashCode = hashCode * 59 + this.Id.GetHashCode();
                if (this.Name != null)
                    hashCode = hashCode * 59 + this.Name.GetHashCode();
                if (this.CreateDate != null)
                    hashCode = hashCode * 59 + this.CreateDate.GetHashCode();
                if (this.DeadlineDate != null)
                    hashCode = hashCode * 59 + this.DeadlineDate.GetHashCode();
                if (this.ProjectNote != null)
                    hashCode = hashCode * 59 + this.ProjectNote.GetHashCode();
                if (this.Tasks != null)
                    hashCode = hashCode * 59 + this.Tasks.GetHashCode();
                if (this.Tags != null)
                    hashCode = hashCode * 59 + this.Tags.GetHashCode();
                if (this.Category != null)
                    hashCode = hashCode * 59 + this.Category.GetHashCode();
                if (this.InvolvedUsers != null)
                    hashCode = hashCode * 59 + this.InvolvedUsers.GetHashCode();
                if (this.IsArchieved != null)
                    hashCode = hashCode * 59 + this.IsArchieved.GetHashCode();
                return hashCode;
            }
        }

        /// <summary>
        /// To validate all properties of the instance
        /// </summary>
        /// <param name="validationContext">Validation context</param>
        /// <returns>Validation Result</returns>
        IEnumerable<System.ComponentModel.DataAnnotations.ValidationResult> IValidatableObject.Validate(ValidationContext validationContext)
        {
            yield break;
        }
    }
}
