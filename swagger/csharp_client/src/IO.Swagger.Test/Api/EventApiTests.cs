/* 
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing EventApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class EventApiTests
    {
        private EventApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new EventApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of EventApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' EventApi
            //Assert.IsInstanceOfType(typeof(EventApi), instance, "instance is a EventApi");
        }

        /// <summary>
        /// Test DeleteEvent
        /// </summary>
        [Test]
        public void DeleteEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tid = null;
            //long? eid = null;
            //string apiKey = null;
            //instance.DeleteEvent(tid, eid, apiKey);
            
        }
        /// <summary>
        /// Test GetEventById
        /// </summary>
        [Test]
        public void GetEventByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tid = null;
            //long? eid = null;
            //string apiKey = null;
            //var response = instance.GetEventById(tid, eid, apiKey);
            //Assert.IsInstanceOf<ModelEvent> (response, "response is ModelEvent");
        }
        /// <summary>
        /// Test UpdateEvent
        /// </summary>
        [Test]
        public void UpdateEventTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tid = null;
            //long? eid = null;
            //string apiKey = null;
            //var response = instance.UpdateEvent(tid, eid, apiKey);
            //Assert.IsInstanceOf<ModelEvent> (response, "response is ModelEvent");
        }
    }

}
