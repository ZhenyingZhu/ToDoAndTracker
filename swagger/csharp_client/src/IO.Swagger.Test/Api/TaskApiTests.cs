/* 
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Reflection;
using RestSharp;
using NUnit.Framework;

using IO.Swagger.Client;
using IO.Swagger.Api;
using IO.Swagger.Model;

namespace IO.Swagger.Test
{
    /// <summary>
    ///  Class for testing TaskApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by Swagger Codegen.
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    [TestFixture]
    public class TaskApiTests
    {
        private TaskApi instance;

        /// <summary>
        /// Setup before each unit test
        /// </summary>
        [SetUp]
        public void Init()
        {
            instance = new TaskApi();
        }

        /// <summary>
        /// Clean up after each unit test
        /// </summary>
        [TearDown]
        public void Cleanup()
        {

        }

        /// <summary>
        /// Test an instance of TaskApi
        /// </summary>
        [Test]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsInstanceOfType' TaskApi
            //Assert.IsInstanceOfType(typeof(TaskApi), instance, "instance is a TaskApi");
        }

        /// <summary>
        /// Test AddTask
        /// </summary>
        [Test]
        public void AddTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Task body = null;
            //string apiKey = null;
            //var response = instance.AddTask(body, apiKey);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        /// <summary>
        /// Test DeleteTask
        /// </summary>
        [Test]
        public void DeleteTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tid = null;
            //string apiKey = null;
            //instance.DeleteTask(tid, apiKey);
            
        }
        /// <summary>
        /// Test GetTaskById
        /// </summary>
        [Test]
        public void GetTaskByIdTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //long? tid = null;
            //string apiKey = null;
            //var response = instance.GetTaskById(tid, apiKey);
            //Assert.IsInstanceOf<Task> (response, "response is Task");
        }
        /// <summary>
        /// Test GetTasks
        /// </summary>
        [Test]
        public void GetTasksTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //string apiKey = null;
            //var response = instance.GetTasks(apiKey);
            //Assert.IsInstanceOf<List<Task>> (response, "response is List<Task>");
        }
        /// <summary>
        /// Test UpdateTask
        /// </summary>
        [Test]
        public void UpdateTaskTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //Task body = null;
            //long? tid = null;
            //string apiKey = null;
            //instance.UpdateTask(body, tid, apiKey);
            
        }
    }

}
