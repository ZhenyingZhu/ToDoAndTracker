/*
 * ToDo and Tracker
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Task} from '../model/Task';

/**
* Task service.
* @module api/TaskApi
* @version 0.0.1
*/
export class TaskApi {

    /**
    * Constructs a new TaskApi. 
    * @alias module:api/TaskApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addTask operation.
     * @callback moduleapi/TaskApi~addTaskCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new task
     * @param {module:model/Task} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TaskApi~addTaskCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addTask(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addTask");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteTask operation.
     * @callback moduleapi/TaskApi~deleteTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a task
     * @param {Number} tid Task id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TaskApi~deleteTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteTask(tid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling deleteTask");
      }

      let pathParams = {
        'tid': tid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tasks/{tid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTaskById operation.
     * @callback moduleapi/TaskApi~getTaskByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Task{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find task by ID
     * Returns a single task
     * @param {Number} tid ID of task to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TaskApi~getTaskByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTaskById(tid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling getTaskById");
      }

      let pathParams = {
        'tid': tid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Task;

      return this.apiClient.callApi(
        '/tasks/{tid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getTasks operation.
     * @callback moduleapi/TaskApi~getTasksCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Task>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the tasks the user involves in
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TaskApi~getTasksCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getTasks(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Task];

      return this.apiClient.callApi(
        '/tasks', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateTask operation.
     * @callback moduleapi/TaskApi~updateTaskCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a task with form data. Can be used to add an event
     * @param {module:model/Task} body 
     * @param {Number} tid ID of the task that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/TaskApi~updateTaskCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateTask(body, tid, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateTask");
      }
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling updateTask");
      }

      let pathParams = {
        'tid': tid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tasks/{tid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}