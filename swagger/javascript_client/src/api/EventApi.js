/*
 * ToDo and Tracker
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Event} from '../model/Event';

/**
* Event service.
* @module api/EventApi
* @version 0.0.1
*/
export class EventApi {

    /**
    * Constructs a new EventApi. 
    * @alias module:api/EventApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the deleteEvent operation.
     * @callback moduleapi/EventApi~deleteEventCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes an event
     * @param {Number} tid Task id to delete
     * @param {Number} eid ID of the event to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/EventApi~deleteEventCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteEvent(tid, eid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling deleteEvent");
      }
      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling deleteEvent");
      }

      let pathParams = {
        'tid': tid,'eid': eid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/tasks/{tid}/events/{eid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getEventById operation.
     * @callback moduleapi/EventApi~getEventByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get an event by id
     * @param {Number} tid ID of the task to return event
     * @param {Number} eid ID of the event to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/EventApi~getEventByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getEventById(tid, eid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling getEventById");
      }
      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling getEventById");
      }

      let pathParams = {
        'tid': tid,'eid': eid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;

      return this.apiClient.callApi(
        '/tasks/{tid}/events/{eid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateEvent operation.
     * @callback moduleapi/EventApi~updateEventCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Event{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Update an event by id
     * @param {Number} tid ID of the task to return event
     * @param {Number} eid ID of the event to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/EventApi~updateEventCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    updateEvent(tid, eid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'tid' is set
      if (tid === undefined || tid === null) {
        throw new Error("Missing the required parameter 'tid' when calling updateEvent");
      }
      // verify the required parameter 'eid' is set
      if (eid === undefined || eid === null) {
        throw new Error("Missing the required parameter 'eid' when calling updateEvent");
      }

      let pathParams = {
        'tid': tid,'eid': eid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Event;

      return this.apiClient.callApi(
        '/tasks/{tid}/events/{eid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}