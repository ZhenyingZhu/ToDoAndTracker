/*
 * ToDo and Tracker
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from "../ApiClient";
import {Error} from '../model/Error';
import {Project} from '../model/Project';

/**
* Project service.
* @module api/ProjectApi
* @version 0.0.1
*/
export class ProjectApi {

    /**
    * Constructs a new ProjectApi. 
    * @alias module:api/ProjectApi
    * @class
    * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
    * default to {@link module:ApiClient#instanc
    e} if unspecified.
    */
    constructor(apiClient) {
        this.apiClient = apiClient || ApiClient.instance;
    }

    /**
     * Callback function to receive the result of the addProject operation.
     * @callback moduleapi/ProjectApi~addProjectCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Add a new project
     * @param {module:model/Project} body 
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/ProjectApi~addProjectCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    addProject(body, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling addProject");
      }

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = Project;

      return this.apiClient.callApi(
        '/projects', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the deleteProject operation.
     * @callback moduleapi/ProjectApi~deleteProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Deletes a project
     * @param {Number} pid Project id to delete
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/ProjectApi~deleteProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    deleteProject(pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling deleteProject");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{pid}', 'DELETE',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjectById operation.
     * @callback moduleapi/ProjectApi~getProjectByIdCallback
     * @param {String} error Error message, if any.
     * @param {module:model/Project{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Find project by ID
     * Returns a single project
     * @param {Number} pid ID of project to return
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/ProjectApi~getProjectByIdCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjectById(pid, opts, callback) {
      opts = opts || {};
      let postBody = null;
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling getProjectById");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = Project;

      return this.apiClient.callApi(
        '/projects/{pid}', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the getProjects operation.
     * @callback moduleapi/ProjectApi~getProjectsCallback
     * @param {String} error Error message, if any.
     * @param {Array.<module:model/Project>{ data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Get all the projects the user involves in
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/ProjectApi~getProjectsCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link <&vendorExtensions.x-jsdoc-type>}
     */
    getProjects(opts, callback) {
      opts = opts || {};
      let postBody = null;

      let pathParams = {
        
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = [];
      let accepts = ['application/json'];
      let returnType = [Project];

      return this.apiClient.callApi(
        '/projects', 'GET',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
    /**
     * Callback function to receive the result of the updateProject operation.
     * @callback moduleapi/ProjectApi~updateProjectCallback
     * @param {String} error Error message, if any.
     * @param data This operation does not return a value.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Updates a project with form data. Can add a task
     * @param {module:model/Project} body 
     * @param {Number} pid ID of the project that needs to be updated
     * @param {Object} opts Optional parameters
     * @param {String} opts.apiKey 
     * @param {module:api/ProjectApi~updateProjectCallback} callback The callback function, accepting three arguments: error, data, response
     */
    updateProject(body, pid, opts, callback) {
      opts = opts || {};
      let postBody = body;
      // verify the required parameter 'body' is set
      if (body === undefined || body === null) {
        throw new Error("Missing the required parameter 'body' when calling updateProject");
      }
      // verify the required parameter 'pid' is set
      if (pid === undefined || pid === null) {
        throw new Error("Missing the required parameter 'pid' when calling updateProject");
      }

      let pathParams = {
        'pid': pid
      };
      let queryParams = {
        
      };
      let headerParams = {
        'api_key': opts['apiKey']
      };
      let formParams = {
        
      };

      let authNames = ['api_key', 'todotracker_auth'];
      let contentTypes = ['application/json'];
      let accepts = ['application/json'];
      let returnType = null;

      return this.apiClient.callApi(
        '/projects/{pid}', 'PUT',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

}