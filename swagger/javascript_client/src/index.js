/*
 * ToDo and Tracker
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 3.0.33
 *
 * Do not edit the class manually.
 *
 */
import {ApiClient} from './ApiClient';
import {ApiResponse} from './model/ApiResponse';
import {Category} from './model/Category';
import {Error} from './model/Error';
import {Event} from './model/Event';
import {Order} from './model/Order';
import {Pet} from './model/Pet';
import {PetIdUploadImageBody} from './model/PetIdUploadImageBody';
import {PetPetIdBody} from './model/PetPetIdBody';
import {Project} from './model/Project';
import {Tag} from './model/Tag';
import {Task} from './model/Task';
import {User} from './model/User';
import {EventApi} from './api/EventApi';
import {PetApi} from './api/PetApi';
import {ProjectApi} from './api/ProjectApi';
import {StoreApi} from './api/StoreApi';
import {TaskApi} from './api/TaskApi';
import {UserApi} from './api/UserApi';

/**
* For_this_sample_you_can_use_the_api_key_special_key_to_test_the_authorization_filters_.<br>
* The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
* <p>
* An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
* <pre>
* var ToDoAndTracker = require('index'); // See note below*.
* var xxxSvc = new ToDoAndTracker.XxxApi(); // Allocate the API class we're going to use.
* var yyyModel = new ToDoAndTracker.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
* and put the application logic within the callback function.</em>
* </p>
* <p>
* A non-AMD browser application (discouraged) might do something like this:
* <pre>
* var xxxSvc = new ToDoAndTracker.XxxApi(); // Allocate the API class we're going to use.
* var yyy = new ToDoAndTracker.Yyy(); // Construct a model instance.
* yyyModel.someProperty = 'someValue';
* ...
* var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
* ...
* </pre>
* </p>
* @module index
* @version 0.0.1
*/
export {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient,

    /**
     * The ApiResponse model constructor.
     * @property {module:model/ApiResponse}
     */
    ApiResponse,

    /**
     * The Category model constructor.
     * @property {module:model/Category}
     */
    Category,

    /**
     * The Error model constructor.
     * @property {module:model/Error}
     */
    Error,

    /**
     * The Event model constructor.
     * @property {module:model/Event}
     */
    Event,

    /**
     * The Order model constructor.
     * @property {module:model/Order}
     */
    Order,

    /**
     * The Pet model constructor.
     * @property {module:model/Pet}
     */
    Pet,

    /**
     * The PetIdUploadImageBody model constructor.
     * @property {module:model/PetIdUploadImageBody}
     */
    PetIdUploadImageBody,

    /**
     * The PetPetIdBody model constructor.
     * @property {module:model/PetPetIdBody}
     */
    PetPetIdBody,

    /**
     * The Project model constructor.
     * @property {module:model/Project}
     */
    Project,

    /**
     * The Tag model constructor.
     * @property {module:model/Tag}
     */
    Tag,

    /**
     * The Task model constructor.
     * @property {module:model/Task}
     */
    Task,

    /**
     * The User model constructor.
     * @property {module:model/User}
     */
    User,

    /**
    * The EventApi service constructor.
    * @property {module:api/EventApi}
    */
    EventApi,

    /**
    * The PetApi service constructor.
    * @property {module:api/PetApi}
    */
    PetApi,

    /**
    * The ProjectApi service constructor.
    * @property {module:api/ProjectApi}
    */
    ProjectApi,

    /**
    * The StoreApi service constructor.
    * @property {module:api/StoreApi}
    */
    StoreApi,

    /**
    * The TaskApi service constructor.
    * @property {module:api/TaskApi}
    */
    TaskApi,

    /**
    * The UserApi service constructor.
    * @property {module:api/UserApi}
    */
    UserApi
};
