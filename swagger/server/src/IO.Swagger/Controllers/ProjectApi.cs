/*
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class ProjectApiController : ControllerBase
    { 
        /// <summary>
        /// Add a new project
        /// </summary>
        /// <param name="body"></param>
        /// <param name="apiKey"></param>
        /// <response code="201">successfully create the project</response>
        /// <response code="400">fail to create the project</response>
        /// <response code="401">API key is missing or invalid</response>
        [HttpPost]
        [Route("/api/beta/projects")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("AddProject")]
        [SwaggerResponse(statusCode: 201, type: typeof(Project), description: "successfully create the project")]
        public virtual IActionResult AddProject([FromBody]Project body, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 201 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(201, default(Project));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "{\n  \"isArchieved\" : true,\n  \"projectNote\" : \"projectNote\",\n  \"deadlineDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"category\" : \"work\",\n  \"involvedUsers\" : [ 3, 3 ],\n  \"tasks\" : [ {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  }, {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  } ],\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 9\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 9\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Project>(exampleJson)
                        : default(Project);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Deletes a project
        /// </summary>
        /// <param name="pid">Project id to delete</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/api/beta/projects/{pid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteProject")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult DeleteProject([FromRoute][Required]long? pid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Find project by ID
        /// </summary>
        /// <remarks>Returns a single project</remarks>
        /// <param name="pid">ID of project to return</param>
        /// <param name="apiKey"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/api/beta/projects/{pid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetProjectById")]
        [SwaggerResponse(statusCode: 200, type: typeof(Project), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetProjectById([FromRoute][Required]long? pid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(Project));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"isArchieved\" : true,\n  \"projectNote\" : \"projectNote\",\n  \"deadlineDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"category\" : \"work\",\n  \"involvedUsers\" : [ 3, 3 ],\n  \"tasks\" : [ {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  }, {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  } ],\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 9\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 9\n  } ]\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<Project>(exampleJson)
                        : default(Project);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Get all the projects the user involves in
        /// </summary>
        /// <param name="apiKey"></param>
        /// <response code="200">successful operation</response>
        /// <response code="401">API key is missing or invalid</response>
        [HttpGet]
        [Route("/api/beta/projects")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetProjects")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Project>), description: "successful operation")]
        public virtual IActionResult GetProjects([FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Project>));

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);
            string exampleJson = null;
            exampleJson = "[ {\n  \"isArchieved\" : true,\n  \"projectNote\" : \"projectNote\",\n  \"deadlineDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"category\" : \"work\",\n  \"involvedUsers\" : [ 3, 3 ],\n  \"tasks\" : [ {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  }, {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  } ],\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 9\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 9\n  } ]\n}, {\n  \"isArchieved\" : true,\n  \"projectNote\" : \"projectNote\",\n  \"deadlineDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"name\" : \"name\",\n  \"id\" : 0,\n  \"category\" : \"work\",\n  \"involvedUsers\" : [ 3, 3 ],\n  \"tasks\" : [ {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  }, {\n    \"recurRule\" : \"recurRule\",\n    \"expectedStartTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"expectedTimeDuration\" : \"P1D\",\n    \"name\" : \"name\",\n    \"stepNum\" : 5,\n    \"id\" : 6,\n    \"projectIds\" : [ 1, 1 ],\n    \"state\" : \"queued\",\n    \"priority\" : \"notAnalysed\",\n    \"expectedFinishTime\" : \"2000-01-23T04:56:07.000+00:00\",\n    \"assignedUser\" : 7,\n    \"events\" : [ {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    }, {\n      \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"id\" : 5,\n      \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n      \"taskId\" : 2\n    } ]\n  } ],\n  \"createDate\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"tags\" : [ {\n    \"name\" : \"name\",\n    \"id\" : 9\n  }, {\n    \"name\" : \"name\",\n    \"id\" : 9\n  } ]\n} ]";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<List<Project>>(exampleJson)
                        : default(List<Project>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Updates a project with form data. Can add a task
        /// </summary>
        /// <param name="body"></param>
        /// <param name="pid">ID of the project that needs to be updated</param>
        /// <param name="apiKey"></param>
        /// <response code="204">successful operation</response>
        /// <response code="400">Invalid input</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPut]
        [Route("/api/beta/projects/{pid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateProject")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult UpdateProject([FromBody]Project body, [FromRoute][Required]long? pid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 204 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(204);

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            throw new NotImplementedException();
        }
    }
}
