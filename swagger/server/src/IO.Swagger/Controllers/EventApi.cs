/*
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Collections.Generic;
using Microsoft.AspNetCore.Mvc;
using Swashbuckle.AspNetCore.Annotations;
using Swashbuckle.AspNetCore.SwaggerGen;
using Newtonsoft.Json;
using System.ComponentModel.DataAnnotations;
using IO.Swagger.Attributes;
using IO.Swagger.Security;
using Microsoft.AspNetCore.Authorization;
using IO.Swagger.Models;

namespace IO.Swagger.Controllers
{ 
    /// <summary>
    /// 
    /// </summary>
    [ApiController]
    public class EventApiController : ControllerBase
    { 
        /// <summary>
        /// Deletes an event
        /// </summary>
        /// <param name="tid">Task id to delete</param>
        /// <param name="eid">ID of the event to return</param>
        /// <param name="apiKey"></param>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpDelete]
        [Route("/api/beta/tasks/{tid}/events/{eid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("DeleteEvent")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult DeleteEvent([FromRoute][Required]long? tid, [FromRoute][Required]long? eid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));

            throw new NotImplementedException();
        }

        /// <summary>
        /// Get an event by id
        /// </summary>
        /// <param name="tid">ID of the task to return event</param>
        /// <param name="eid">ID of the event to return</param>
        /// <param name="apiKey"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpGet]
        [Route("/api/beta/tasks/{tid}/events/{eid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("GetEventById")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEvent), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult GetEventById([FromRoute][Required]long? tid, [FromRoute][Required]long? eid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEvent));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : 5,\n  \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"taskId\" : 2\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelEvent>(exampleJson)
                        : default(ModelEvent);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// Update an event by id
        /// </summary>
        /// <param name="tid">ID of the task to return event</param>
        /// <param name="eid">ID of the event to return</param>
        /// <param name="apiKey"></param>
        /// <response code="200">successful operation</response>
        /// <response code="400">Invalid ID supplied</response>
        /// <response code="401">API key is missing or invalid</response>
        /// <response code="404">The specified resource was not found</response>
        [HttpPut]
        [Route("/api/beta/tasks/{tid}/events/{eid}")]
        [Authorize(AuthenticationSchemes = ApiKeyAuthenticationHandler.SchemeName)]
        [ValidateModelState]
        [SwaggerOperation("UpdateEvent")]
        [SwaggerResponse(statusCode: 200, type: typeof(ModelEvent), description: "successful operation")]
        [SwaggerResponse(statusCode: 404, type: typeof(Error), description: "The specified resource was not found")]
        public virtual IActionResult UpdateEvent([FromRoute][Required]long? tid, [FromRoute][Required]long? eid, [FromHeader]string apiKey)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ModelEvent));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400);

            //TODO: Uncomment the next line to return response 401 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(401);

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(Error));
            string exampleJson = null;
            exampleJson = "{\n  \"startTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"id\" : 5,\n  \"endTime\" : \"2000-01-23T04:56:07.000+00:00\",\n  \"taskId\" : 2\n}";
            
                        var example = exampleJson != null
                        ? JsonConvert.DeserializeObject<ModelEvent>(exampleJson)
                        : default(ModelEvent);            //TODO: Change the data returned
            return new ObjectResult(example);
        }
    }
}
