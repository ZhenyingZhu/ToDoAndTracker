/*
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Task : IEquatable<Task>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets ProjectIds
        /// </summary>

        [DataMember(Name="projectIds")]
        public List<long?> ProjectIds { get; set; }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum PriorityEnum
        {
            /// <summary>
            /// Enum NotAnalysedEnum for notAnalysed
            /// </summary>
            [EnumMember(Value = "notAnalysed")]
            NotAnalysedEnum = 0,
            /// <summary>
            /// Enum HighEnum for high
            /// </summary>
            [EnumMember(Value = "high")]
            HighEnum = 1,
            /// <summary>
            /// Enum MediumEnum for medium
            /// </summary>
            [EnumMember(Value = "medium")]
            MediumEnum = 2,
            /// <summary>
            /// Enum LowEnum for low
            /// </summary>
            [EnumMember(Value = "low")]
            LowEnum = 3        }

        /// <summary>
        /// Gets or Sets Priority
        /// </summary>

        [DataMember(Name="priority")]
        public PriorityEnum? Priority { get; set; }

        /// <summary>
        /// Gets or Sets StepNum
        /// </summary>

        [DataMember(Name="stepNum")]
        public int? StepNum { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedStartTime
        /// </summary>

        [DataMember(Name="expectedStartTime")]
        public DateTime? ExpectedStartTime { get; set; }

        /// <summary>
        /// Gets or Sets ExpectedFinishTime
        /// </summary>

        [DataMember(Name="expectedFinishTime")]
        public DateTime? ExpectedFinishTime { get; set; }

        /// <summary>
        /// [ISO_8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)
        /// </summary>
        /// <value>[ISO_8601](https://en.wikipedia.org/wiki/ISO_8601#Durations)</value>

        [DataMember(Name="expectedTimeDuration")]
        public string ExpectedTimeDuration { get; set; }

        /// <summary>
        /// Gets or Sets State
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum StateEnum
        {
            /// <summary>
            /// Enum QueuedEnum for queued
            /// </summary>
            [EnumMember(Value = "queued")]
            QueuedEnum = 0,
            /// <summary>
            /// Enum StartedEnum for started
            /// </summary>
            [EnumMember(Value = "started")]
            StartedEnum = 1,
            /// <summary>
            /// Enum BlockedEnum for blocked
            /// </summary>
            [EnumMember(Value = "blocked")]
            BlockedEnum = 2,
            /// <summary>
            /// Enum CompletedEnum for completed
            /// </summary>
            [EnumMember(Value = "completed")]
            CompletedEnum = 3,
            /// <summary>
            /// Enum AbandonedEnum for abandoned
            /// </summary>
            [EnumMember(Value = "abandoned")]
            AbandonedEnum = 4        }

        /// <summary>
        /// Gets or Sets State
        /// </summary>

        [DataMember(Name="state")]
        public StateEnum? State { get; set; }

        /// <summary>
        /// Gets or Sets RecurRule
        /// </summary>

        [DataMember(Name="recurRule")]
        public string RecurRule { get; set; }

        /// <summary>
        /// Gets or Sets Events
        /// </summary>

        [DataMember(Name="events")]
        public List<ModelEvent> Events { get; set; }

        /// <summary>
        /// Gets or Sets AssignedUser
        /// </summary>

        [DataMember(Name="assignedUser")]
        public long? AssignedUser { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Task {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  ProjectIds: ").Append(ProjectIds).Append("\n");
            sb.Append("  Priority: ").Append(Priority).Append("\n");
            sb.Append("  StepNum: ").Append(StepNum).Append("\n");
            sb.Append("  ExpectedStartTime: ").Append(ExpectedStartTime).Append("\n");
            sb.Append("  ExpectedFinishTime: ").Append(ExpectedFinishTime).Append("\n");
            sb.Append("  ExpectedTimeDuration: ").Append(ExpectedTimeDuration).Append("\n");
            sb.Append("  State: ").Append(State).Append("\n");
            sb.Append("  RecurRule: ").Append(RecurRule).Append("\n");
            sb.Append("  Events: ").Append(Events).Append("\n");
            sb.Append("  AssignedUser: ").Append(AssignedUser).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Task)obj);
        }

        /// <summary>
        /// Returns true if Task instances are equal
        /// </summary>
        /// <param name="other">Instance of Task to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Task other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    ProjectIds == other.ProjectIds ||
                    ProjectIds != null &&
                    ProjectIds.SequenceEqual(other.ProjectIds)
                ) && 
                (
                    Priority == other.Priority ||
                    Priority != null &&
                    Priority.Equals(other.Priority)
                ) && 
                (
                    StepNum == other.StepNum ||
                    StepNum != null &&
                    StepNum.Equals(other.StepNum)
                ) && 
                (
                    ExpectedStartTime == other.ExpectedStartTime ||
                    ExpectedStartTime != null &&
                    ExpectedStartTime.Equals(other.ExpectedStartTime)
                ) && 
                (
                    ExpectedFinishTime == other.ExpectedFinishTime ||
                    ExpectedFinishTime != null &&
                    ExpectedFinishTime.Equals(other.ExpectedFinishTime)
                ) && 
                (
                    ExpectedTimeDuration == other.ExpectedTimeDuration ||
                    ExpectedTimeDuration != null &&
                    ExpectedTimeDuration.Equals(other.ExpectedTimeDuration)
                ) && 
                (
                    State == other.State ||
                    State != null &&
                    State.Equals(other.State)
                ) && 
                (
                    RecurRule == other.RecurRule ||
                    RecurRule != null &&
                    RecurRule.Equals(other.RecurRule)
                ) && 
                (
                    Events == other.Events ||
                    Events != null &&
                    Events.SequenceEqual(other.Events)
                ) && 
                (
                    AssignedUser == other.AssignedUser ||
                    AssignedUser != null &&
                    AssignedUser.Equals(other.AssignedUser)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (ProjectIds != null)
                    hashCode = hashCode * 59 + ProjectIds.GetHashCode();
                    if (Priority != null)
                    hashCode = hashCode * 59 + Priority.GetHashCode();
                    if (StepNum != null)
                    hashCode = hashCode * 59 + StepNum.GetHashCode();
                    if (ExpectedStartTime != null)
                    hashCode = hashCode * 59 + ExpectedStartTime.GetHashCode();
                    if (ExpectedFinishTime != null)
                    hashCode = hashCode * 59 + ExpectedFinishTime.GetHashCode();
                    if (ExpectedTimeDuration != null)
                    hashCode = hashCode * 59 + ExpectedTimeDuration.GetHashCode();
                    if (State != null)
                    hashCode = hashCode * 59 + State.GetHashCode();
                    if (RecurRule != null)
                    hashCode = hashCode * 59 + RecurRule.GetHashCode();
                    if (Events != null)
                    hashCode = hashCode * 59 + Events.GetHashCode();
                    if (AssignedUser != null)
                    hashCode = hashCode * 59 + AssignedUser.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Task left, Task right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Task left, Task right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
