/*
 * ToDo and Tracker
 *
 * For this sample, you can use the api key `special-key` to test the authorization filters.
 *
 * OpenAPI spec version: 0.0.1
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace IO.Swagger.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Project : IEquatable<Project>
    { 
        /// <summary>
        /// Gets or Sets Id
        /// </summary>

        [DataMember(Name="id")]
        public long? Id { get; set; }

        /// <summary>
        /// Gets or Sets Name
        /// </summary>
        [Required]

        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets CreateDate
        /// </summary>

        [DataMember(Name="createDate")]
        public DateTime? CreateDate { get; set; }

        /// <summary>
        /// Gets or Sets DeadlineDate
        /// </summary>

        [DataMember(Name="deadlineDate")]
        public DateTime? DeadlineDate { get; set; }

        /// <summary>
        /// Gets or Sets ProjectNote
        /// </summary>

        [DataMember(Name="projectNote")]
        public string ProjectNote { get; set; }

        /// <summary>
        /// Gets or Sets Tasks
        /// </summary>

        [DataMember(Name="tasks")]
        public List<Task> Tasks { get; set; }

        /// <summary>
        /// Gets or Sets Tags
        /// </summary>

        [DataMember(Name="tags")]
        public List<Tag> Tags { get; set; }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum CategoryEnum
        {
            /// <summary>
            /// Enum WorkEnum for work
            /// </summary>
            [EnumMember(Value = "work")]
            WorkEnum = 0,
            /// <summary>
            /// Enum HouseholdEnum for household
            /// </summary>
            [EnumMember(Value = "household")]
            HouseholdEnum = 1,
            /// <summary>
            /// Enum SelfImproveEnum for selfImprove
            /// </summary>
            [EnumMember(Value = "selfImprove")]
            SelfImproveEnum = 2,
            /// <summary>
            /// Enum HealthEnum for health
            /// </summary>
            [EnumMember(Value = "health")]
            HealthEnum = 3,
            /// <summary>
            /// Enum LeisureEnum for leisure
            /// </summary>
            [EnumMember(Value = "leisure")]
            LeisureEnum = 4        }

        /// <summary>
        /// Gets or Sets Category
        /// </summary>

        [DataMember(Name="category")]
        public CategoryEnum? Category { get; set; }

        /// <summary>
        /// Gets or Sets InvolvedUsers
        /// </summary>

        [DataMember(Name="involvedUsers")]
        public List<long?> InvolvedUsers { get; set; }

        /// <summary>
        /// Gets or Sets IsArchieved
        /// </summary>

        [DataMember(Name="isArchieved")]
        public bool? IsArchieved { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Project {\n");
            sb.Append("  Id: ").Append(Id).Append("\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  CreateDate: ").Append(CreateDate).Append("\n");
            sb.Append("  DeadlineDate: ").Append(DeadlineDate).Append("\n");
            sb.Append("  ProjectNote: ").Append(ProjectNote).Append("\n");
            sb.Append("  Tasks: ").Append(Tasks).Append("\n");
            sb.Append("  Tags: ").Append(Tags).Append("\n");
            sb.Append("  Category: ").Append(Category).Append("\n");
            sb.Append("  InvolvedUsers: ").Append(InvolvedUsers).Append("\n");
            sb.Append("  IsArchieved: ").Append(IsArchieved).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Project)obj);
        }

        /// <summary>
        /// Returns true if Project instances are equal
        /// </summary>
        /// <param name="other">Instance of Project to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Project other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Id == other.Id ||
                    Id != null &&
                    Id.Equals(other.Id)
                ) && 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    CreateDate == other.CreateDate ||
                    CreateDate != null &&
                    CreateDate.Equals(other.CreateDate)
                ) && 
                (
                    DeadlineDate == other.DeadlineDate ||
                    DeadlineDate != null &&
                    DeadlineDate.Equals(other.DeadlineDate)
                ) && 
                (
                    ProjectNote == other.ProjectNote ||
                    ProjectNote != null &&
                    ProjectNote.Equals(other.ProjectNote)
                ) && 
                (
                    Tasks == other.Tasks ||
                    Tasks != null &&
                    Tasks.SequenceEqual(other.Tasks)
                ) && 
                (
                    Tags == other.Tags ||
                    Tags != null &&
                    Tags.SequenceEqual(other.Tags)
                ) && 
                (
                    Category == other.Category ||
                    Category != null &&
                    Category.Equals(other.Category)
                ) && 
                (
                    InvolvedUsers == other.InvolvedUsers ||
                    InvolvedUsers != null &&
                    InvolvedUsers.SequenceEqual(other.InvolvedUsers)
                ) && 
                (
                    IsArchieved == other.IsArchieved ||
                    IsArchieved != null &&
                    IsArchieved.Equals(other.IsArchieved)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Id != null)
                    hashCode = hashCode * 59 + Id.GetHashCode();
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (CreateDate != null)
                    hashCode = hashCode * 59 + CreateDate.GetHashCode();
                    if (DeadlineDate != null)
                    hashCode = hashCode * 59 + DeadlineDate.GetHashCode();
                    if (ProjectNote != null)
                    hashCode = hashCode * 59 + ProjectNote.GetHashCode();
                    if (Tasks != null)
                    hashCode = hashCode * 59 + Tasks.GetHashCode();
                    if (Tags != null)
                    hashCode = hashCode * 59 + Tags.GetHashCode();
                    if (Category != null)
                    hashCode = hashCode * 59 + Category.GetHashCode();
                    if (InvolvedUsers != null)
                    hashCode = hashCode * 59 + InvolvedUsers.GetHashCode();
                    if (IsArchieved != null)
                    hashCode = hashCode * 59 + IsArchieved.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Project left, Project right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Project left, Project right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
